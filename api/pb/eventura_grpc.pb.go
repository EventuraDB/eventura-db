// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: api/eventura.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventService_AppendEvent_FullMethodName     = "/eventura.EventService/AppendEvent"
	EventService_ReadEvent_FullMethodName       = "/eventura.EventService/ReadEvent"
	EventService_ReadByStream_FullMethodName    = "/eventura.EventService/ReadByStream"
	EventService_ReadByEventType_FullMethodName = "/eventura.EventService/ReadByEventType"
	EventService_ReadByTags_FullMethodName      = "/eventura.EventService/ReadByTags"
	EventService_ReadAll_FullMethodName         = "/eventura.EventService/ReadAll"
	EventService_Subscribe_FullMethodName       = "/eventura.EventService/Subscribe"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	AppendEvent(ctx context.Context, in *AppendEventRequest, opts ...grpc.CallOption) (*AppendEventResponse, error)
	ReadEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	ReadByStream(ctx context.Context, in *ReadByStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error)
	ReadByEventType(ctx context.Context, in *ReadByEventTypeRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error)
	ReadByTags(ctx context.Context, in *ReadByTagsRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error)
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadStreamResponse], error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) AppendEvent(ctx context.Context, in *AppendEventRequest, opts ...grpc.CallOption) (*AppendEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEventResponse)
	err := c.cc.Invoke(ctx, EventService_AppendEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, EventService_ReadEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadByStream(ctx context.Context, in *ReadByStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadStreamResponse)
	err := c.cc.Invoke(ctx, EventService_ReadByStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadByEventType(ctx context.Context, in *ReadByEventTypeRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadStreamResponse)
	err := c.cc.Invoke(ctx, EventService_ReadByEventType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadByTags(ctx context.Context, in *ReadByTagsRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadStreamResponse)
	err := c.cc.Invoke(ctx, EventService_ReadByTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_ReadAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadAllRequest, ReadStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_ReadAllClient = grpc.ServerStreamingClient[ReadStreamResponse]

func (c *eventServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], EventService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_SubscribeClient = grpc.ServerStreamingClient[SubscribeResponse]

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility.
type EventServiceServer interface {
	AppendEvent(context.Context, *AppendEventRequest) (*AppendEventResponse, error)
	ReadEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	ReadByStream(context.Context, *ReadByStreamRequest) (*ReadStreamResponse, error)
	ReadByEventType(context.Context, *ReadByEventTypeRequest) (*ReadStreamResponse, error)
	ReadByTags(context.Context, *ReadByTagsRequest) (*ReadStreamResponse, error)
	ReadAll(*ReadAllRequest, grpc.ServerStreamingServer[ReadStreamResponse]) error
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventServiceServer struct{}

func (UnimplementedEventServiceServer) AppendEvent(context.Context, *AppendEventRequest) (*AppendEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEvent not implemented")
}
func (UnimplementedEventServiceServer) ReadEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEvent not implemented")
}
func (UnimplementedEventServiceServer) ReadByStream(context.Context, *ReadByStreamRequest) (*ReadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByStream not implemented")
}
func (UnimplementedEventServiceServer) ReadByEventType(context.Context, *ReadByEventTypeRequest) (*ReadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByEventType not implemented")
}
func (UnimplementedEventServiceServer) ReadByTags(context.Context, *ReadByTagsRequest) (*ReadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByTags not implemented")
}
func (UnimplementedEventServiceServer) ReadAll(*ReadAllRequest, grpc.ServerStreamingServer[ReadStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedEventServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}
func (UnimplementedEventServiceServer) testEmbeddedByValue()                      {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_AppendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AppendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_AppendEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AppendEvent(ctx, req.(*AppendEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ReadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ReadEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ReadEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadByStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadByStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ReadByStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ReadByStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ReadByStream(ctx, req.(*ReadByStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadByEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadByEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ReadByEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ReadByEventType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ReadByEventType(ctx, req.(*ReadByEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ReadByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ReadByTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ReadByTags(ctx, req.(*ReadByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).ReadAll(m, &grpc.GenericServerStream[ReadAllRequest, ReadStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_ReadAllServer = grpc.ServerStreamingServer[ReadStreamResponse]

func _EventService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_SubscribeServer = grpc.ServerStreamingServer[SubscribeResponse]

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventura.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEvent",
			Handler:    _EventService_AppendEvent_Handler,
		},
		{
			MethodName: "ReadEvent",
			Handler:    _EventService_ReadEvent_Handler,
		},
		{
			MethodName: "ReadByStream",
			Handler:    _EventService_ReadByStream_Handler,
		},
		{
			MethodName: "ReadByEventType",
			Handler:    _EventService_ReadByEventType_Handler,
		},
		{
			MethodName: "ReadByTags",
			Handler:    _EventService_ReadByTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAll",
			Handler:       _EventService_ReadAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EventService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/eventura.proto",
}
